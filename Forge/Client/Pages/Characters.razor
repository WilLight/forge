@page "/characters"
@using Forge.Shared
@using Forge.Shared.Filters;
@using Forge.Shared.Data
@inject HttpClient Http

<h1>Characters</h1>

@if (_characters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="overview-action-bar">
        <a class="btn btn-outline-primary overview-action-btn" href="character">New character</a>
    </div>
    <CollapsableFilter @bind-Model="_filterModel" OnFilterApplied="(CharacterFilter model) => FilterApplied(model)">
        <TextFilterComponent Name="Name" Model="_filterModel" Placeholder="Name" ModelUpdate="(model, val) => model.Name = val"></TextFilterComponent>
        <MultipleSelectFilterComponent Data="@_tags.ToList()"
                                       IdEpxression="(tag) => tag.Id.ToString()"
                                       TextExpression="(tag) => tag.Name"
                                       Name="Tags" Model="_filterModel" 
                                       ModelUpdate="(model, val) => model.Tags = val.Select(tag => tag.Id).ToList()"></MultipleSelectFilterComponent>
    </CollapsableFilter>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Tags</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in _characters)
            {
            <tr>
                <td>@character.Id</td>
                <td>@character.Name</td>
                <td>@character.Description</td>
                <td>
                    @if (character.Tags != null)
                    {
                        @foreach (var tag in character.Tags)
                        {
                            <span class="badge badge-secondary">@tag.Name</span>
                        }
                    }
                </td>
                <td>
                    <a class="nav-link" href="character/@character.Id">
                        <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                    </a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private CharacterModel[] _characters;
    private CharacterTagModel[] _tags;
    private CharacterFilter _filterModel;

    protected override async Task OnInitializedAsync()
    {
        _characters = await Http.GetFromJsonAsync<CharacterModel[]>("api/character/get");
        _tags = await Http.GetFromJsonAsync<CharacterTagModel[]>($"api/charactertag/get");

        // Filter
        _filterModel = new CharacterFilter();
    }

    private async void FilterApplied(CharacterFilter filterModel)
    {
        var result = await Http.PostAsJsonAsync<CharacterFilter>("api/character/getfiltered", filterModel);
        _characters = await result.Content.ReadFromJsonAsync<CharacterModel[]>();
        StateHasChanged();
    }
}

@page "/characters"
@using Forge.Shared
@using Forge.Shared.Filters
@using Forge.Shared.Data
@using Forge.Shared.ViewModels
@using Newtonsoft.Json
@inject HttpClient Http

<h1>Characters</h1>

<div class="overview-action-bar">
    <a class="btn btn-outline-primary overview-action-btn" href="character">New character</a>
</div>
<CollapsableFilter TModel="CharacterFilter" @bind-Model="_filterModel" OnFilterApplied="FilterApplied">
    <TextFilterComponent TModel="CharacterFilter" Name="Name" Model="_filterModel" Placeholder="Name" ModelUpdate="(model, val) => model.Name = val"></TextFilterComponent>
    <MultipleSelectFilterComponent TModel="CharacterFilter" TItem="CharacterTagModel"
                                   Data="@_tags.ToList()"
                                   IdEpxression="(tag) => tag.Id.ToString()"
                                   TextExpression="(tag) => tag.Name"
                                   Name="Tags" Model="_filterModel"
                                   ModelUpdate="(model, val) => { Console.WriteLine(val); model.Tags = val.Select(tag => tag.Id).ToList(); }"></MultipleSelectFilterComponent>
</CollapsableFilter>
<div style="margin-bottom: 10px"></div>
<DataTable @ref="_dataTable" TModel="CharacterModel" TFilter="CharacterFilter" GetData="async (filter, model) => await GetData(filter)" Filter="_filterModel">
    <DataTableColumn TModel="CharacterModel" TFilter="CharacterFilter" Name="Id" GetValue="(model) => model.Id.ToString()"></DataTableColumn>
    <DataTableColumn TModel="CharacterModel" TFilter="CharacterFilter" Name="Name" GetValue="(model) => model.Name.ToString()"></DataTableColumn>
    <DataTableColumn TModel="CharacterModel" TFilter="CharacterFilter" Name="Tags" AutoWidth="false" GetValue="(model) => model.Tags" Render="RenderTags"></DataTableColumn>
    <DataTableColumn TModel="CharacterModel" TFilter="CharacterFilter" Name="Edit" Render="RenderEdit"></DataTableColumn>
</DataTable>
<div style="margin-bottom: 10px"></div>

@code {
    private List<CharacterTagModel> _tags = new List<CharacterTagModel>();
    private CharacterFilter _filterModel;
    private DataTable<CharacterModel, CharacterFilter> _dataTable;

    protected override async Task OnInitializedAsync()
    {
        // Filter
        _filterModel = new CharacterFilter();

        _tags = (await Http.GetFromJsonAsync<CharacterTagModel[]>($"api/charactertag/get")).ToList();
    }

    private string RenderTags(CharacterModel model)
    {
        var tagsToRender = model.Tags.Select(tag => _tags.First(t => t.Id == tag.Id));

        return $"<div style=\"display: flex; flex-direction: row; flex-wrap: wrap\">" + String.Join("", tagsToRender.Select(tag => $"<span class=\"badge badge-pill badge-secondary\" style=\"margin-right: 5px; margin-bottom: 5px\">" + tag.Name + "</span>")) + "</div>";
    }

    private string RenderEdit(CharacterModel model)
    {
        return "<a class=\"nav-link\" href=\"character/" + model.Id + "\">Edit</a>";
    }

    private async Task FilterApplied(CharacterFilter filterModel)
    {
        Console.WriteLine("FilterApplied -> Called");
        _filterModel = filterModel;
        await _dataTable.Reload();
    }

    private async Task<CharacterFiltered> GetData(CharacterFilter filter)
    {
        var result = await Http.PostAsJsonAsync("api/character/getfiltered", filter);
        var filtered = await result.Content.ReadFromJsonAsync<CharacterFiltered>();

        return filtered;
    }
}

@page "/character"
@page "/character/{Id}"
@using Forge.Shared
@using Forge.Shared.Data
@using Markdig
@inject HttpClient Http
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<DetailPage Title="Character" OnSave="Save" OnDelete="Delete" OnRestore="Restore" IsLoading="@(_character == null)" IsCreating="@string.IsNullOrEmpty(Id)" IsDeleted="@(Disabled)">
    <Body>
        <form>
            <div class="form-group">
                <label for="char_name">Name</label>
                <input placeholder="Name" class="form-control" name="char_name" @bind="_character.Name" disabled="@Disabled" />
            </div>
            <div class="form-group">
                <label>Tags</label>
                <Select2 TItem="CharacterTagModel"
                         @ref="_selectControl"
                         Id="tags_select"
                         Data="@_tags"
                         IdEpxression="(item) => item.Id.ToString()"
                         TextExpression="(item) => item.Name"
                         @bind-Value="@_selectedTags"
                         IsDisabled="@Disabled">
                </Select2>
            </div>
            <div class="form-group">
                <label for="char_description">Description</label>
                <MarkdownEditor @bind-Value="_character.Description" ReadOnly="@Disabled"></MarkdownEditor>
            </div>
        </form>
    </Body>
</DetailPage>

@code {
    [Parameter]
    public string Id { get; set; }
    public bool Disabled { get => _character?.Deleted ?? true; }

    private CharacterModel _character { get; set; }
    private string _descriptionMarkdown { get; set; }

    private List<CharacterTagModel> _tags { get; set; }
    private List<CharacterTagModel> _selectedTags { get; set; } = new List<CharacterTagModel>();

    private Select2<CharacterTagModel> _selectControl;
      
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Editing character: {Id}");
        if (string.IsNullOrEmpty(Id) == false)
        {
            _character = await Http.GetFromJsonAsync<CharacterModel>($"api/character/getone?id={Id}&includeDeleted=true");
        }
        else
        {
            _character = new CharacterModel()
            {
                Id = Guid.NewGuid(),
                Name = string.Empty,
                Description = string.Empty,
                Tags = new List<CharacterTagModel>()
            };
        }

        // Tags
        var tagsArray = await Http.GetFromJsonAsync<CharacterTagModel[]>($"api/charactertag/get");
        _tags = tagsArray.ToList();
        _selectedTags = _character.Tags.ToList();
    }

    private async void Save()
    {
        Console.WriteLine($"Tags: {_selectedTags.Count} tags");
        _character.Tags = _selectedTags;

        var response = new HttpResponseMessage();
        if (string.IsNullOrEmpty(Id) == false)
        {
            response = await Http.PostAsJsonAsync<CharacterModel>("api/character/Update", _character);
        }
        else
        {
            response = await Http.PostAsJsonAsync<CharacterModel>("api/character/Insert", _character);
            Id = _character.Id.ToString();
            NavigationManager.NavigateTo($"/character/{Id}");
            StateHasChanged();
        }

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Save successful");
        }
        else
        {
            ToastService.ShowError($"Error: {response.ReasonPhrase}");
        }
    }
      
    private async void Delete()
    {
        var response = new HttpResponseMessage();
        response = await Http.PostAsJsonAsync<Guid>("api/character/DeleteOne", _character.Id);

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Deletion successful");
            _character.Deleted = true;
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError($"Error: {response.ReasonPhrase}");
        }
    }

    private async void Restore()
    {
        var response = new HttpResponseMessage();
        response = await Http.PostAsJsonAsync<Guid>("api/character/RestoreOne", _character.Id);

        if (response.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Restoration successful");
            _character.Deleted = false;
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError($"Error: {response.ReasonPhrase}");
        }
    }
}
